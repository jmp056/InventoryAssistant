<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InformacionConsultaFacturasLabel.Text" xml:space="preserve">
    <value>Esta consulta permite a los usuarios que tienen la autorización para ingresar a ella realizar tareas como: ver todas las facturas que se han 
realizado en el sistema, desde su inicio hasta la fecha actual, al igual que poder realizar consultas con filtros, en este caso los filtros que
se pueden usar para poder depurar la información y obtener la requerida son filtrar por código, vendedor, cliente, monto y por ultimo, 
la fecha en la que se realizo esa facturaDe otra manera esta consulta contiene un botón, que al seleccionar una factura x, si deseas 
obtener más información sobre ella, puedes obtenerla haciendo doble clic en esta, como también haciendo clic en el botón una vez 
seleccionada la factura.</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>Esta consulta permite a los usuarios que tienen la autorización para ingresar a ella realizar tareas como: ver todos los usuarios que se 
encuentran en ese momento registrados en el sistema, posee varias herramientas para poder filtrar la información, las cuales permiten
realizar el filtrado por: Nombre y/o apellido, cedula, numero telefónico, nivel que posea el usuario y su nombre de usuarios, ademas
de un filtrado de fecha ingresar al sistema. Además, posee un botón que se activa al seleccionar un usuario de la consulta con el cual 
se pueden ver todos los datos del usuario en el sistema, esta tarea también se puede realizar haciendo dos clics en un usuario de los de
 la consulta.</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Esta consulta permite a los usuarios que tienen la autorización para ingresar a ella realizar tareas como: ver todas las categorías de 
productos disponibles, es decir almacenadas en el sistema, al igual que las demás consultas esta posee varias herramientas para realizar
la filtración de estas, pueden ayudar a filtrar tanto por el condigo como por el nombre de la consulta, posee también un botón con el
cual si hay una categoría seleccionada se puede acceder al registro para que esta pueda ser modificada.</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Esta consulta permite a todos los usuarios ver todos los productos que se encuentran registrados en el sistema, para realizar tareas como
las siguientes: Filtrar productos por código, descripción, categoría a la que pertenece, cantidad existente en inventario y precio actual con
diferentes herramientas para facilitar la búsqueda del producto que se desea encontrar, además de poseer dos botones, uno que lleva al
registro con toda la información del producto y otro que va a la ventana para realizar una entrada del producto seleccionado, de igual
manera, si se realizan dos clics va al registro de productos con la información del producto seleccionado.</value>
  </data>
  <data name="label11.Text" xml:space="preserve">
    <value>Esta consulta permite a los usuarios que tienen la autorización para ingresar a ella realizar tareas como: ver todas las entradas de
productos que se han realizado en la vida útil que ha tenido el sistema en la empresa, posee herramientas que ayudan a filtrar la  entrada
que se desea encontrar buscando tanto por código, como por el producto, la fecha en la que se realizó y la cantidad que se registró en
esa entrada, al igual que las demás consultas posee un botón que lleva al registro con los datos de la entrada, en lacual se puede 
modificar y/o ver los datos de esa entrada en una perspectiva diferente.</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Esta consulta permite a los usuarios que tienen la autorización para ingresar a ella realizar tareas como: todos los cuadres de caja que se 
han realizado en lo que tiene la empresa con el sistema de información, esta permite buscar de manera rápida el cuadre  que se desea 
encontrar con herramientas que ayudan a filtrar la información sea por el usuario que realizo el cuadre, el total vendido ese día, la 
diferencia que hubo entre lo vendido y lo que se encuentra en la caja y el total que hay en efectivo en caja, esta consulta también posee
un botón que al seleccionar un cuadre y darle clic permite ir a ese cuadre para obtener más información de él, a esto también se puede 
acceder realizando dos clics sobre un cuadre en la consulta.</value>
  </data>
</root>